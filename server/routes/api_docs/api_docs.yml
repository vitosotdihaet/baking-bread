################################################################################
#                              API Information                                 #
################################################################################
info:
  title: 'Baking Bread API DOCS'
  description: |
      ## FOR USAGE 

      Just scroll down to the interactive API requests!

      If any not really understandable `errors` occur, contact ***@Eugene Toropkin***

      -----------------------------------------------
        
      üìù **Note:** Log in as an ***administrator*** before making requests marked with a padlock üîí

      Before login, sign up as an ***administrator*** in case you dont have admin username and password.

      Check the **Authenticaton API** requests for those purposes.
      
      -----------------------------------------------

      ## REQUEST HTTP METHODS 

      - To `create` good types or goods use ***POST*** method

      - To `get` good types or goods use ***GET*** method

      - To `update` good types or goods use ***PATCH*** method

      - To `delete` good types or goods use ***DELETE*** method

      -----------------------------------------------

      ***The below table defines the `errors` that API may return***
        
      | Status Code | Description | Message |
      | --- | --- | --- |
      | 405 | METHOD NOT ALLOWED | ***METHOD_NOT_ALLOWED*** |
      | 400 | BAD REQUEST | ***NO_SIGNUP_DATA_PROVIDED*** |
      | 400 | BAD REQUEST | ***NO_LOGIN_DATA_PROVIDED*** |
      | 409 | CONFLICT | ***INVALID_LOGIN_OR_PASSWORD*** |
      | 409 | CONFLICT | ***USER_ALREADY_EXISTS*** |
      | 409 | CONFLICT | ***ADMIN_ALREADY_EXISTS*** |
      | 409 | CONFLICT | ***USER_DOESNT_EXIST*** |
      | 409 | CONFLICT | ***ADMIN_DOESNT_EXIST*** |
      | 401 | UNAUTHORIZED | ***NO_TOKEN_PROVIDED*** |
      | 401 | UNAUTHORIZED | ***NO_FRESH_TOKEN_PROVIDED*** |
      | 401 | UNAUTHORIZED | ***TOKEN_HAS_EXPIRED*** |
      | 403 | FORBIDDEN | ***ADMIN_RIGHTS_REQUIRED*** |
      | 422 | UNPROCESSABLE ENTITY | ***INVALID_TOKEN*** |

      -----------------------------------------------

  
  version: 'beta 0.0.1'

  termsOfService: https://github.com/vitosotdihaet/baking-bread/blob/main/CODE_OF_CONDUCT.md

  contact:
    url: https://vk.com/akumii
    email: toropkibn@gmail.com

  license:
    name: Nginx 1.18.0
    url: https://nginx.org/LICENSE

externalDocs:
  description: Find out more about Baking Bread!
  url: https://github.com/vitosotdihaet/baking-bread

tags:
  - name: Authenticaton API
    description: Do everything with authentication :)
  - name: Good types API
    description: Do everything with our good types :)
  - name: Goods API
    description: Do everything with our goods :)

################################################################################
#                            Hosts, Servers, cookies auth                      #
################################################################################

servers: [
  {
    "url": "https://eugenv.ru/",
    "description": "Staging server"
  },
  {
    "url": "http://127.0.0.1:5000/",
    "description": "Development server"
  },
  {
    "url": "No production server is present...",
  }
]

################################################################################
#                                    Paths                                     #
################################################################################
paths:
  /api/admin/signup:
    post:
      operationId: admin_signup
      summary: Signup with admin rights
      tags:
        - Authenticaton API
      description: |
        ## Sign up with **admin rights** using this ***POST*** request!

        This `POST` request registers admins.

        -----------------------------------------------
        
        üìù **Note:** In the next examples we will use base URL *baking-bread.com*

        Due testing we likely will use *eugenv.ru* server base URL.
        
        -----------------------------------------------

        To sign up as an admin we have to send request to *baking-bread.com/***api/admin/signup** with ***POST*** method
      externalDocs:
        description: Project repository
        url: https://github.com/vitosotdihaet/baking-bread

      requestBody:
        required: true
        description: Signed up in using this `JSON`
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginAndSignup'

      responses:
        201:
          description: |
            Response: Signed up as an **admin** successfully

  /api/admin/login:
    post:
      operationId: admin_login
      summary: Login with admin rights
      tags:
        - Authenticaton API
      description: |
        ## Login with **admin rights** using this ***POST*** request!

        This `POST` request logs in admins.

        -----------------------------------------------
        
        üìù **Note:** In the next examples we will use base URL *baking-bread.com*

        Due testing we likely will use *eugenv.ru* server base URL.
        
        -----------------------------------------------
        
        üìù **Note 2:** Log in as an ***administrator*** before making requests marked with a padlock

        Before login sign up as an ***administrator***
        
        -----------------------------------------------

        To log in as an admin we have to send request to *baking-bread.com/***api/admin/login** with ***POST*** method

      externalDocs:
        description: Project repository
        url: https://github.com/vitosotdihaet/baking-bread

      requestBody:
        required: true
        description: Logged in using this `JSON`
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginAndSignup'

      responses:
        201:
          description: |
            Response: Logged in as an **admin** successfully

  /api/user/signup:
    post:
      operationId: signup
      summary: Signup without admin rights
      tags:
        - Authenticaton API
      description: |
        ## Sign up without **admin rights** using this ***POST*** request!

        This `POST` request registers users.

        -----------------------------------------------
        
        üìù **Note:** In the next examples we will use base URL *baking-bread.com*

        Due testing we likely will use *eugenv.ru* server base URL.
        
        -----------------------------------------------

        To sign up as an user we have to send request to *baking-bread.com/***api/user/signup** with ***POST*** method

      externalDocs:
        description: Project repository
        url: https://github.com/vitosotdihaet/baking-bread

      requestBody:
        required: true
        description: Signed up in using this `JSON`
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginAndSignup'

      responses:
        201:
          description: |
            Response: Signed up as an **user** successfully

  /api/user/login:
    post:
      operationId: login
      summary: Login without admin rights
      tags:
        - Authenticaton API
      description: |
        ## Login without **admin rights** using this ***POST*** request!

        This `POST` request logs in users.

        -----------------------------------------------
        
        üìù **Note:** In the next examples we will use base URL *baking-bread.com*

        Due testing we likely will use *eugenv.ru* server base URL.
        
        -----------------------------------------------

        To log in as an user we have to send request to *baking-bread.com/***api/user/login** with ***POST*** method

      externalDocs:
        description: Project repository
        url: https://github.com/vitosotdihaet/baking-bread

      requestBody:
        required: true
        description: Logged in using this `JSON`
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginAndSignup'

      responses:
        201:
          description: |
            Response: Logged in as an **user** successfully

  /api/logout:
    post:
      security:
        - cookieAuth: []

      operationId: logout

      summary: Logout

      tags:
        - Authenticaton API

      description: |
        ## Logout using this ***POST*** request!

        This `POST` request logs out users.

        -----------------------------------------------
        
        üìù **Note:** In the next examples we will use base URL *baking-bread.com*

        Due testing we likely will use *eugenv.ru* server base URL.
        
        -----------------------------------------------

        To log out we have to send request to *baking-bread.com/***api/logout** with ***POST*** method

      externalDocs:
        description: Project repository
        url: https://github.com/vitosotdihaet/baking-bread

      responses:
        200:
          description: |
            Response: Logged out successfully

  /api/refresh:
    post:
      security:
        - cookieAuth: []

      operationId: refresh

      summary: Refresh the access-token

      tags:
        - Authenticaton API

      description: |
        ## Refresh the access-token using this ***POST*** request!

        This `POST` refreshes access-tokens.

        -----------------------------------------------
        
        üìù **Note:** In the next examples we will use base URL *baking-bread.com*

        Due testing we likely will use *eugenv.ru* server base URL.
        
        -----------------------------------------------

        To refresh the access-token we have to send request to *baking-bread.com/***api/refresh** with ***POST*** method

      externalDocs:
        description: Project repository
        url: https://github.com/vitosotdihaet/baking-bread

      responses:
        200:
          description: |
            Response: `Logged out successfully`

  /api/user/access:
    get:
      security:
        - cookieAuth: []

      operationId: user_access

      summary: Checks if the user logged in and has access to this endpoint

      tags:
        - Authenticaton API

      description: |
        ## Check the user access using this ***GET*** request!

        This `GET` checks the user access.

        -----------------------------------------------
        
        üìù **Note:** In the next examples we will use base URL *baking-bread.com*

        Due testing we likely will use *eugenv.ru* server base URL.
        
        -----------------------------------------------

        To check the user access we have to send request to *baking-bread.com/***api/user/access** with ***GET*** method

      externalDocs:
        description: Project repository
        url: https://github.com/vitosotdihaet/baking-bread

      responses:
        200:
          description: |
            Response: User has **logged in** and has **access** to this endpoint

  /api/admin/access:
    get:
      security:
        - cookieAuth: []

      operationId: admin_access

      summary: Checks if the user logged in and has admin rights

      tags:
        - Authenticaton API

      description: |
        ## Check the user's admin rights using this ***GET*** request!

        This `GET` checks the user's admin rights.

        -----------------------------------------------
        
        üìù **Note:** In the next examples we will use base URL *baking-bread.com*

        Due testing we likely will use *eugenv.ru* server base URL.
        
        -----------------------------------------------

        To check the user's admin rights we have to send request to *baking-bread.com/***api/admin/access** with ***GET*** method

      externalDocs:
        description: Project repository
        url: https://github.com/vitosotdihaet/baking-bread

      responses:
        200:
          description: |
            Response: User has **logged in** and has **admin rights** to enter this endpoint

  /api/user:
    delete:
      security:
        - cookieAuth: []

      operationId: delete_account

      summary: Deletes an **user** account

      tags:
        - Authenticaton API

      description: |
        ## Deletes an **user** account using this ***POST*** request!

        This `DELETE` deletes an **user** account.

        -----------------------------------------------
        
        üìù **Note:** In the next examples we will use base URL *baking-bread.com*

        Due testing we likely will use *eugenv.ru* server base URL.
        
        -----------------------------------------------

        To delete an account we have to send request to *baking-bread.com/***api/user** with ***DELETE*** method

      externalDocs:
        description: Project repository
        url: https://github.com/vitosotdihaet/baking-bread

      responses:
        200:
          description: |
            Response: **Deleted** the account successfully

  /api/admin:
    delete:
      security:
        - cookieAuth: []

      operationId: delete_admin

      summary: Deletes an **admin** account

      tags:
        - Authenticaton API

      description: |
        ## Deletes an **admin** account using this ***POST*** request!

        This `DELETE` deletes an **admin** account.

        -----------------------------------------------
        
        üìù **Note:** In the next examples we will use base URL *baking-bread.com*

        Due testing we likely will use *eugenv.ru* server base URL.
        
        -----------------------------------------------

        To delete an account we have to send request to *baking-bread.com/***api/admin** with ***DELETE*** method

      externalDocs:
        description: Project repository
        url: https://github.com/vitosotdihaet/baking-bread

      responses:
        200:
          description: |
            Response: **Deleted** the account successfully


  /api/good_types:
    post:
      security:
        - cookieAuth: []

      operationId: create_good_type

      summary: Create a good type

      tags:
        - Good types API

      description: |
        ## Create a good type using this ***POST*** request!

        This `POST` request creates a new good type.

        -----------------------------------------------
        
        üìù **Note:** In the next examples we will use base URL *baking-bread.com*

        Due testing we likely will use *eugenv.ru* server base URL.
        
        -----------------------------------------------


        To create a good type we have to send request to *baking-bread.com/***api/good_types** with ***POST*** method


        **The below table defines the HTTP Status codes that this API may return**
        
        | Status Code      | Description | Reason                             |
        | ---------------- | ------------| -----------------------------------|
        | 201              | CREATED     | If a good type is created successfuly.   |
        | 400              | BAD REQUEST | If JSON in the body of the request failed validation. **(check the response messages for more info)**|
        | 405              | METHOD NOT ALLOWED| If endpoint doesn't support given request method.|
        | 409              | CONFLICT | If you try to add existing good type.|

      externalDocs:
        description: Project repository
        url: https://github.com/vitosotdihaet/baking-bread

      requestBody:
        required: true
        description: Created good type object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoodTypeForPost'

      responses:
        201:
          description: |
            Response: `JSON` of the good type you *successfully* created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoodTypeForPost'
        409:
          description: |
            Response: `{"message": "GOOD_TYPE_ALREADY_EXISTS"}`
        400:
          description: |
            `JSON` you sent in the body of a request ***failed*** validation,
            so you get in response: `JSON` of invalid fileds.


            **Example:**

            You send:

            ```
            {
              "name": "veeeeeryyy loooooooong string",
              "description": 243,
              "orderrrrr": 0
            }
            ```


            You get:

            ```
            {
              "message": {
                "name": "INVALID_LENGTH",
                "description": "INVALID_TYPE",
                "order": "MISSING_DATA",
                "orderrrrr": "UNKNOWN_FIELD"
              }
            }
            ```
        405:
          description: |
            Response: `{"message": "METHOD_NOT_ALLOWED"}`

    get:
      summary: Get all good types

      tags:
        - Good types API

      operationId: get_good_types

      description: |
        ## Get all good types using this ***GET*** request!

        ---

        üìù **Note:** In the examples below, we assume that the base URL is `baking-bread.com`.

        However, during testing, we may use a different server base URL, such as `eugenv.ru`.

        ---

        To get all good types we have to send a request to *baking-bread.com/***api/good_types** with the GET method.

        **The table below defines the HTTP status codes that this API may return:**

        | Status Code | Description | Reason |
        |-------------|-------------|--------|
        | 200         | OK          | The request for all good types was successful. |
        | 400         | BAD REQUEST | The query parameters provided were invalid or used incorrectly. Check the response messages for more information. |
        | 405         | METHOD NOT ALLOWED | The HTTP method used is not supported by this endpoint. |
        | 409         | CONFLICT    | No good types have been added yet. |

      externalDocs:
        description: Project repository
        url: https://github.com/vitosotdihaet/baking-bread

      parameters:
      - in: query
        name: select
        required: false
        description: select desired fields of good types you want to get, separated by coma (e.g. 'name,id')
        type: string
      - in: query
        name: expand
        required: false
        description: set value to 'goods' or e.g. 'goods.select=name' (already known param, but applies to goods in the list) to get list of all related goods in each good type
        type: string
      - in: query
        name: sort
        required: false
        description: set value to 'asc' or 'desc' to sort in the ascending or descending order (if sort is not set, 'sort=asc' is by default) 
        type: string
      responses:
        200:
          description: Got JSON response
        400:
          description: Typically invalid Query Params usage
        409:
          description: No good types have been added
        405:
          description: Request method is not allowed for this endpoint

    delete:
      security:
        - cookieAuth: []

      operationId: delete_good_types

      tags:
        - Good types API

      summary: Delete all good types

      description: DELETE request for deleting good types

      externalDocs:
        description: Project repository
        url: https://github.com/vitosotdihaet/baking-bread

      responses:
        200:
          description: |
            Response: `JSON` of the good types you *successfully* deleted
        409:
          description: No good types have been added.
        405:
          description: Request method is not allowed for this endpoint.

  /api/good_types/{id}:
    get:
      tags:
        - Good types API

      externalDocs:
        description: Project repository
        url: https://github.com/vitosotdihaet/baking-bread

      operationId: get_good_type_by_id

      summary: Get a good type

      description: GET request for getting good type by its ID

      parameters:
      - name: id
        in: path
        description: Requesting good type by its ID
        required: true
        type: integer
      - in: query
        name: select
        description: select desired fields of good type you want to get, separated by coma (e.g. 'name,id')
        type: string
      - in: query
        name: expand
        description: set value to 'goods' or e.g. 'goods.select=name' (already known param, but applies to goods in the list) to get list of all related goods in good type
        type: string

      responses:
        200:
          description: Got JSON response
        400:
          description: Typically invalid Query Params usage
        409:
          description: No good types have been added or good type doesnt exist
        405:
          description: Request method is not allowed for this endpoint
    
    patch:
      security:
        - cookieAuth: []

      operationId: update_good_type_by_id

      tags:
        - Good types API

      summary: Update a good type

      description: PATCH request for updating good type by its ID

      externalDocs:
        description: Project repository
        url: https://github.com/vitosotdihaet/baking-bread

      parameters:
        - name: id
          in: path
          description: Requesting good type by its ID
          required: true
          type: integer

      requestBody:
        required: true
        description: Updated good type object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoodTypeForPatch'

      responses:
        200:
          description: |
            Response: `JSON` of the good type you *successfully* updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoodTypeForPatch'
        400:
          description: JSON in the body of the request failed validation (check the response message for more info)
        405:
          description: Request method is not allowed for this endpoint
        409:
          description: No good types have been added or good type doesnt exist

    delete:
      security:
        - cookieAuth: []

      operationId: delete_good_type_by_id

      tags:
        - Good types API

      summary: Delete a good type

      description: DELETE request for deleting good type by its ID

      externalDocs:
        description: Project repository
        url: https://github.com/vitosotdihaet/baking-bread

      parameters:
        - name: id
          in: path
          description: Requesting good type by its ID
          required: true
          type: integer

      responses:
        200:
          description: |
            Response: `JSON` of the good type you *successfully* deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoodTypeForPost'
        409:
          description: No good types have been added or good type doesnt exist
        405:
          description: Request method is not allowed for this endpoint

  /api/good_types/{id}/goods:
    post:
      security:
        - cookieAuth: []

      operationId: create_good

      tags:
        - Goods API

      summary: Create good related to good type with desired ID

      description: |
        ## Create a Good related to a Good Type

        This `POST` request creates a new good related to the good type identified by the given ID.

        -----------------------------------------------

        üìù **Note:** In the examples below, we assume that the base URL is `baking-bread.com`. 

        However, during testing, we may use a different server base URL, such as `eugenv.ru`.

        -----------------------------------------------

        To create a new good, send a `POST` request to *baking-bread.com/***api/good_types/{id}/goods**. The request body must contain a JSON object with the details of the new good.

        The following table lists the HTTP status codes that this API may return:

        | Status Code | Description | Reason |
        | --- | --- | --- |
        | 200 | OK | The good was created successfully. The response body contains the details of the new good. |
        | 400 | Bad Request | The JSON in the request body failed validation. Check the response message for more information. |
        | 405 | Method Not Allowed | The HTTP method used is not supported by this endpoint. |
        | 409 | Conflict | The good you are trying to add already exists. |

      externalDocs:
        description: Project repository
        url: https://github.com/vitosotdihaet/baking-bread

      parameters:
        - name: id
          in: path
          description: Requesting good type by its ID
          required: true
          type: integer

      requestBody:
        required: true
        description: Created good object
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/GoodForPost'

      responses:
        200:
          description: |
            Response: `JSON` of the good you *successfully* created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoodForPost'
        409:
          description: Good we try to add already exists or good type doesnt exist
        400:
          description: JSON in the body of the request failed validation (check the response message for more info)
        405:
          description: Request method is not allowed for this endpoint

  /api/good_types/goods:
    get:
      tags:
        - Goods API

      operationId: get_goods

      summary: Get all goods

      description: GET request for getting all of the goods

      externalDocs:
        description: Project repository
        url: https://github.com/vitosotdihaet/baking-bread

      parameters:
      - in: query
        name: select
        description: select desired fields of goods you want to get, separated by coma (e.g. 'name,id')
        type: string

      responses:
        200:
          description: Got JSON response
        400:
          description: Typically invalid Query Params usage
        409:
          description: No goods have been added
        405:
          description: Request method is not allowed for this endpoint

    delete:
      security:
        - cookieAuth: []

      operationId: delete_all_goods

      tags:
        - Goods API

      summary: Delete all goods

      description: DELETE request for deleting all goods

      externalDocs:
        description: Project repository
        url: https://github.com/vitosotdihaet/baking-bread

      responses:
        200:
          description: |
            Response: `JSON` of the goods you *successfully* deleted
        409:
          description: No goods have been added.
        405:
          description: Request method is not allowed for this endpoint.

  /api/good_types/goods/{id}:
    get:
      tags:
        - Goods API

      externalDocs:
        description: Project repository
        url: https://github.com/vitosotdihaet/baking-bread

      operationId: get_good_by_id

      summary: Get a good

      description: GET request for getting good by its ID

      parameters:
      - name: id
        in: path
        description: Requesting good by its ID
        required: true
        type: integer
      - in: query
        name: select
        description: select desired fields of good you want to get, separated by coma (e.g. 'name,id')
        type: string

      responses:
        200:
          description: Got JSON response
        400:
          description: Typically invalid Query Params usage
        409:
          description: No goods have been added or good doesnt exist
        405:
          description: Request method is not allowed for this endpoint
    
    patch:
      security:
        - cookieAuth: []

      operationId: update_good_by_id

      tags:
        - Goods API

      summary: Update a good

      description: PATCH request for updating good by its ID

      externalDocs:
        description: Project repository
        url: https://github.com/vitosotdihaet/baking-bread

      parameters:
        - name: id
          in: path
          description: Requesting good type by its ID
          required: true
          type: integer

      requestBody:
        required: true
        description: Updated good object
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/GoodForPatch'

      responses:
        200:
          description: |
            Response: `JSON` of the good you *successfully* updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoodForPatch'
        400:
          description: JSON in the body of the request failed validation (check the response message for more info)
        405:
          description: Request method is not allowed for this endpoint
        409:
          description: No goods have been added or good doesnt exist

    delete:
      security:
        - cookieAuth: []

      operationId: delete_good_by_id

      tags:
        - Goods API

      summary: Delete a good

      description: DELETE request for deleting good by its ID

      externalDocs:
        description: Project repository
        url: https://github.com/vitosotdihaet/baking-bread

      parameters:
        - name: id
          in: path
          description: Requesting good type by its ID
          required: true
          type: integer

      responses:
        200:
          description: |
            Response: `JSON` of the good you *successfully* deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoodForPost'
        409:
          description: No goods have been added or good doesnt exist
        405:
          description: Request method is not allowed for this endpoint


components:
  schemas:
    GoodTypeForPost:
      type: object
      properties:
        name:
          type: string
          maxLength: 20
          minLength: 1
          description: name of a good type
          required: true
          example: 'good type name'
        description:
          type: string
          maxLength: 200
          minLength: 1
          description: description of a good type
          required: true
          example: 'good type description'
        order:
          type: integer
          description: order of a good type placed in the menu
          required: true
          example: 0

    GoodTypeForPatch:
      type: object
      properties:
        name:
          type: string
          maxLength: 20
          minLength: 1
          description: |
            ***updated*** name of a good type
          example: 'updated g. type name'
        description:
          type: string
          maxLength: 200
          minLength: 1
          description: |
            ***updated*** description of a good type
          example: 'updated good type description'
        order:
          type: integer
          description: |
            ***updated*** order of a good type placed in the menu
          example: 5

    GoodForPost:
      type: object
      properties:
        name:
          type: string
          maxLength: 20
          minLength: 1
          description: name of a good
          required: true
          example: 'good name'
        description:
          type: string
          maxLength: 200
          minLength: 1
          description: description of a good
          required: true
          example: 'good description'
        image:
          type: string
          format: binary
        available:
          type: boolean
          description: availability of a good
          required: true
          example: true
        previousPrice:
          type: integer
          description: previous price of a good
          example: 599
        price:
          type: integer
          description: price of a good
          required: true
          example: 399
        weight:
          type: integer
          description: weight of a good in grams
          required: true
          example: 441
        lifetime:
          type: integer
          description: lifetime of a good in hours
          example: 2
          required: true
        quantity:
          type: integer
          description: quantity of a good in pcs
          required: true
          example: 1

    GoodForPatch:
      type: object
      properties:
        name:
          required: false
          type: string
          maxLength: 20
          minLength: 1
          description: updated name of a good
          example: 'updated good name'
        description:
          required: false
          type: string
          maxLength: 200
          minLength: 1
          description: updated description of a good
          example: 'updated good description'
        image:
          required: false
          type: string
          format: binary
        available:
          required: false
          type: boolean
          description: updated availability of a good
          example: false
        previousPrice:
          required: false
          type: integer
          description: updated previous price of a good
          example: 799
        price:
          required: false
          type: integer
          description: updated price of a good
          example: 599
        weight:
          required: false
          type: integer
          description: updated weight of a good in grams
          example: 221
        lifetime:
          required: false
          type: integer
          description: updated lifetime of a good in hours
          example: 5
        quantity:
          required: false
          type: integer
          description: updated quantity of a good in pcs
          example: 5

    LoginAndSignup:
      type: object
      properties:
        username:
          required: true
          type: string
          maxLength: 64
          minLength: 1
          description: login username
          example: 'username'

        password:
          required: true
          type: string
          minLength: 1
          description: login password
          example: 'password'